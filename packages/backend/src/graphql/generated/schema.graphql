### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Artist {
  id: String!
  name: String!
  tracks(after: TrackWhereUniqueInput, before: TrackWhereUniqueInput, first: Int, last: Int, skip: Int): [Track!]!
}

input ArtistCreateInput {
  id: String
  name: String!
  tracks: TrackCreateManyWithoutArtistsInput
}

input ArtistCreateManyWithoutTracksInput {
  connect: [ArtistWhereUniqueInput!]
  create: [ArtistCreateWithoutTracksInput!]
}

input ArtistCreateWithoutTracksInput {
  id: String
  name: String!
}

input ArtistWhereUniqueInput {
  id: String
}

type Mutation {
  createOneArtist(data: ArtistCreateInput!): Artist!
  createOnePlaylist(data: PlaylistCreateInput!): Playlist!
  createOneSuggestion(data: SuggestionCreateInput!): Suggestion!
  createOneTrack(data: TrackCreateInput!): Track!
}

type Playlist {
  description: String
  id: String!
  name: String!
}

input PlaylistCreateInput {
  description: String
  id: String
  name: String!
}

input PlaylistWhereUniqueInput {
  id: String
}

type Query {
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(after: ArtistWhereUniqueInput, before: ArtistWhereUniqueInput, first: Int, last: Int, skip: Int): [Artist!]!
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  playlists(
    after: PlaylistWhereUniqueInput
    before: PlaylistWhereUniqueInput
    first: Int
    last: Int
    skip: Int
  ): [Playlist!]!
  suggestion(where: SuggestionWhereUniqueInput!): Suggestion
  suggestions(
    after: SuggestionWhereUniqueInput
    before: SuggestionWhereUniqueInput
    first: Int
    last: Int
    skip: Int
  ): [Suggestion!]!
  track(where: TrackWhereUniqueInput!): Track
  tracks(after: TrackWhereUniqueInput, before: TrackWhereUniqueInput, first: Int, last: Int, skip: Int): [Track!]!
}

type Suggestion {
  id: String!
  submitter: String!
  track: Track!
}

input SuggestionCreateInput {
  id: String
  submitter: String!
  track: TrackCreateOneWithoutSuggestionsInput!
}

input SuggestionCreateManyWithoutTrackInput {
  connect: [SuggestionWhereUniqueInput!]
  create: [SuggestionCreateWithoutTrackInput!]
}

input SuggestionCreateWithoutTrackInput {
  id: String
  submitter: String!
}

input SuggestionWhereUniqueInput {
  id: String
}

type Track {
  artists(after: ArtistWhereUniqueInput, before: ArtistWhereUniqueInput, first: Int, last: Int, skip: Int): [Artist!]!
  id: String!
  source: TrackSource!
  suggestions(
    after: SuggestionWhereUniqueInput
    before: SuggestionWhereUniqueInput
    first: Int
    last: Int
    skip: Int
  ): [Suggestion!]!
  url: String!
}

input TrackCreateInput {
  artists: ArtistCreateManyWithoutTracksInput
  id: String
  source: TrackSource!
  suggestions: SuggestionCreateManyWithoutTrackInput
  url: String!
}

input TrackCreateManyWithoutArtistsInput {
  connect: [TrackWhereUniqueInput!]
  create: [TrackCreateWithoutArtistsInput!]
}

input TrackCreateOneWithoutSuggestionsInput {
  connect: TrackWhereUniqueInput
  create: TrackCreateWithoutSuggestionsInput
}

input TrackCreateWithoutArtistsInput {
  id: String
  source: TrackSource!
  suggestions: SuggestionCreateManyWithoutTrackInput
  url: String!
}

input TrackCreateWithoutSuggestionsInput {
  artists: ArtistCreateManyWithoutTracksInput
  id: String
  source: TrackSource!
  url: String!
}

enum TrackSource {
  Spotify
  Youtube
}

input TrackWhereUniqueInput {
  id: String
}
